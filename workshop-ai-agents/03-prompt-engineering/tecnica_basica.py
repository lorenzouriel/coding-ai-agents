#!/usr/bin/env python3
"""
T√©cnicas B√°sicas de Prompt Engineering
======================================

DEMONSTRA√á√ÉO COM INPUT √öNICO:
Todas as t√©cnicas usam o mesmo cen√°rio para mostrar
como diferentes prompts afetam o resultado.

INPUT √öNICO: An√°lise de um produto e-commerce
"""

from langchain_ollama import ChatOllama
from langchain.schema import HumanMessage


# ============================================================================
# Configura√ß√£o e Input √önico
# ============================================================================

print("üéØ Prompt Engineering: T√©cnicas B√°sicas")
print("üì¶ CEN√ÅRIO √öNICO: An√°lise de Produto E-commerce")
print("=" * 60)

# LLM Configuration
llm = ChatOllama(model="mistral:latest", temperature=0.7)

# üì¶ INPUT √öNICO - Dados do produto
PRODUCT_DATA = """
PRODUTO: Fone de Ouvido Bluetooth Premium XYZ
PRE√áO: R$ 299,00
AVALIA√á√ïES: 4.2/5 estrelas (847 avalia√ß√µes)
CARACTER√çSTICAS:
- Cancelamento de ru√≠do ativo
- Bateria 30 horas
- Conectividade Bluetooth 5.0
- Resistente √† √°gua IPX4
- Microfone integrado

COMENT√ÅRIOS DOS CLIENTES:
- "Som excelente, mas o pre√ßo √© um pouco alto"
- "Bateria dura muito, recomendo!"
- "Cancelamento de ru√≠do funciona bem"
- "Chegou com defeito, tive que trocar"
- "Confort√°vel para usar por horas"
"""

print("üì¶ DADOS DO PRODUTO:")
print(PRODUCT_DATA)
print("=" * 60)


# ============================================================================
# T√©cnica 1: Zero-Shot Prompting
# ============================================================================


def zero_shot_analysis():
    """Zero-Shot: Pergunta direta sem contexto adicional"""
    print("\nüéØ T√âCNICA 1: ZERO-SHOT PROMPTING")
    print("-" * 40)
    print("üìù Caracter√≠stica: Pergunta direta, sem exemplos ou contexto")

    prompt = f"""
    Analise este produto:
    
    {PRODUCT_DATA}
    
    Fa√ßa uma an√°lise do produto.
    """

    print("üí¨ Prompt usado: An√°lise direta e simples")

    response = llm.invoke([HumanMessage(content=prompt)])
    print("\nü§ñ RESULTADO ZERO-SHOT:")
    print(f"{response.content.strip()}")

    print("\n‚úÖ Caracter√≠sticas: Resposta gen√©rica, pode variar muito")
    print("‚ö†Ô∏è  Limita√ß√µes: Falta de direcionamento espec√≠fico")


# ============================================================================
# T√©cnica 2: Few-Shot Prompting
# ============================================================================


def few_shot_analysis():
    """Few-Shot: Dar exemplos de como queremos a an√°lise"""
    print("\nüéØ T√âCNICA 2: FEW-SHOT PROMPTING")
    print("-" * 40)
    print("üìù Caracter√≠stica: Fornece exemplos do formato desejado")

    prompt = f"""
    Analise produtos seguindo estes exemplos:
    
    EXEMPLO 1:
    Produto: Smartphone ABC
    An√°lise: ‚≠ê PONTOS FORTES: C√¢mera excelente, bateria duradoura
    ‚ùå PONTOS FRACOS: Pre√ßo elevado, armazenamento limitado
    üéØ RECOMENDA√á√ÉO: Bom para fotografia, mas caro para uso b√°sico
    
    EXEMPLO 2:
    Produto: Notebook DEF
    An√°lise: ‚≠ê PONTOS FORTES: Performance r√°pida, design elegante
    ‚ùå PONTOS FRACOS: Tela pequena, aquece muito
    üéØ RECOMENDA√á√ÉO: Ideal para trabalho, n√£o para jogos
    
    Agora analise este produto seguindo o mesmo formato:
    {PRODUCT_DATA}
    
    An√°lise:
    """

    print("üí¨ Prompt usado: Exemplos + formato estruturado")

    response = llm.invoke([HumanMessage(content=prompt)])
    print("\nü§ñ RESULTADO FEW-SHOT:")
    print(f"{response.content.strip()}")

    print("\n‚úÖ Caracter√≠sticas: Formato consistente, estruturado")
    print("‚ö†Ô∏è  Limita√ß√µes: Prompt mais longo")


# ============================================================================
# T√©cnica 3: Chain of Thought (CoT)
# ============================================================================


def chain_of_thought_analysis():
    """CoT: Pedir racioc√≠nio passo a passo"""
    print("\nüéØ T√âCNICA 3: CHAIN OF THOUGHT")
    print("-" * 40)
    print("üìù Caracter√≠stica: Mostra o processo de racioc√≠nio")

    prompt = f"""
    Analise este produto passo a passo, mostrando seu racioc√≠nio:
    
    {PRODUCT_DATA}
    
    Siga estes passos de an√°lise:
    
    PASSO 1: Analise o pre√ßo vs caracter√≠sticas
    PASSO 2: Avalie as avalia√ß√µes dos clientes
    PASSO 3: Identifique pontos fortes e fracos
    PASSO 4: Considere o p√∫blico-alvo
    PASSO 5: D√™ sua recomenda√ß√£o final
    
    Mostre seu racioc√≠nio em cada passo:
    """

    print("üí¨ Prompt usado: Racioc√≠nio estruturado em etapas")

    response = llm.invoke([HumanMessage(content=prompt)])
    print("\nü§ñ RESULTADO CHAIN OF THOUGHT:")
    print(f"{response.content.strip()}")

    print("\n‚úÖ Caracter√≠sticas: Racioc√≠nio transparente, mais confi√°vel")
    print("‚ö†Ô∏è  Limita√ß√µes: Resposta mais longa")


# ============================================================================
# T√©cnica 4: Role Prompting
# ============================================================================


def role_prompting_analysis():
    """Role Prompting: Assumir papel de especialista"""
    print("\nüéØ T√âCNICA 4: ROLE PROMPTING")
    print("-" * 40)
    print("üìù Caracter√≠stica: Assume papel de especialista")

    prompt = f"""
    Voc√™ √© um especialista em tecnologia de √°udio com 15 anos de experi√™ncia 
    analisando fones de ouvido para uma revista t√©cnica renomada.
    
    Seus leitores confiam em suas an√°lises detalhadas e honestas.
    Voc√™ conhece profundamente:
    - Qualidade de √°udio e drivers
    - Tecnologias de cancelamento de ru√≠do
    - Durabilidade e materiais
    - Custo-benef√≠cio do mercado atual
    
    Analise este produto com sua expertise:
    {PRODUCT_DATA}
    
    Escreva uma an√°lise t√©cnica profissional para seus leitores:
    """

    print("üí¨ Prompt usado: Papel de especialista em √°udio")

    response = llm.invoke([HumanMessage(content=prompt)])
    print("\nü§ñ RESULTADO ROLE PROMPTING:")
    print(f"{response.content.strip()}")

    print("\n‚úÖ Caracter√≠sticas: An√°lise especializada, vocabul√°rio t√©cnico")
    print("‚ö†Ô∏è  Limita√ß√µes: Pode ser muito espec√≠fico")


# ============================================================================
# Compara√ß√£o Side-by-Side
# ============================================================================


def side_by_side_comparison():
    """Compara todas as t√©cnicas lado a lado"""
    print("\nüìä COMPARA√á√ÉO LADO A LADO")
    print("=" * 80)
    print("üéØ MESMO INPUT, DIFERENTES T√âCNICAS:")

    techniques = {
        "Zero-Shot": "An√°lise direta e gen√©rica",
        "Few-Shot": "Formato estruturado com exemplos",
        "Chain of Thought": "Racioc√≠nio passo a passo",
        "Role Prompting": "Expertise de especialista",
    }

    for technique, description in techniques.items():
        print(f"\nüìå {technique.upper()}:")
        print(f"   Abordagem: {description}")
        print("   Resultado: Varia em especificidade e estrutura")

    print("\nüí° INSIGHTS:")
    print("- Zero-Shot: Mais r√°pido, menos espec√≠fico")
    print("- Few-Shot: Formato consistente")
    print("- Chain of Thought: Mais confi√°vel para decis√µes")
    print("- Role Prompting: Maior profundidade t√©cnica")


# ============================================================================
# Dicas Pr√°ticas
# ============================================================================


def practical_tips():
    """Dicas pr√°ticas para escolher a t√©cnica"""
    print("\nüí° QUANDO USAR CADA T√âCNICA:")
    print("=" * 50)

    tips = {
        "üéØ Zero-Shot": [
            "‚úÖ Tarefas simples e diretas",
            "‚úÖ Quando velocidade √© prioridade",
            "‚úÖ Testes r√°pidos de conceito",
        ],
        "üìö Few-Shot": [
            "‚úÖ Quando precisa de formato espec√≠fico",
            "‚úÖ Tarefas de classifica√ß√£o",
            "‚úÖ Quando tem exemplos de qualidade",
        ],
        "üß† Chain of Thought": [
            "‚úÖ Problemas complexos de racioc√≠nio",
            "‚úÖ Quando precisa entender o 'porqu√™'",
            "‚úÖ Decis√µes importantes que precisam justificativa",
        ],
        "üë®‚Äçüéì Role Prompting": [
            "‚úÖ Quando precisa de expertise espec√≠fica",
            "‚úÖ An√°lises t√©cnicas profundas",
            "‚úÖ Quando o p√∫blico-alvo √© especializado",
        ],
    }

    for technique, use_cases in tips.items():
        print(f"\n{technique}:")
        for case in use_cases:
            print(f"  {case}")


# ============================================================================
# Execu√ß√£o Principal
# ============================================================================


def main():
    """Executa todas as demonstra√ß√µes com o mesmo input"""
    try:
        # Demonstrar cada t√©cnica com o mesmo input
        zero_shot_analysis()
        few_shot_analysis()
        chain_of_thought_analysis()
        role_prompting_analysis()

        # Compara√ß√£o e dicas
        side_by_side_comparison()
        practical_tips()

        print("\n" + "=" * 60)
        print("üéì CONCLUS√ÉO:")
        print("O MESMO INPUT pode gerar resultados muito diferentes")
        print("dependendo da t√©cnica de prompt engineering usada!")
        print("=" * 60)

    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        print("Certifique-se que o Ollama est√° rodando:")
        print("ollama run mistral:latest")


if __name__ == "__main__":
    main()